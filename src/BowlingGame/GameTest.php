<?php
/**
 * @author Kifah Abbad
 * Time: 16:52
 */

namespace App\BowlingGame;


use PHPUnit_Framework_TestCase;

class GameTest extends PHPUnit_Framework_TestCase
{


    /**
     * @var Game
     */
    private $game;

    public function setUp()
    {
        $this->game = new Game();
        parent::setUp(); // TODO: Change the autogenerated stub
    }


    /**
     * @test
     */
    public function itScoresAGutterGameAsZero()
    {


        $this->rollTimes(20, 0);

        $this->assertEquals(0, $this->game->score());


    }


    /**
     * @test
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage Negative pins value not allowed
     */
    public function negativePinsNotAllowed()
    {
        $this->game->roll(-2);
    }

    protected function rollTimes(int $times, int $pins)
    {
        for ($counter = 0; $counter < $times; $counter++) {
            $this->game->roll($pins);
        }
    }

    /**
     * @test
     */
    public function itScoresTheSumOfAllKnockedDownPins()
    {

        $this->rollTimes(20, 1);


        $this->assertEquals(20, $this->game->score());


    }

    /**
     * @test
     */
    public function itAwardsOneRollBonusForEverySpare()
    {

        $this->rollASpare();
        $this->game->roll(5);


        $this->rollTimes(17, 0);

        $this->assertEquals(20, $this->game->score());


    }

    protected function rollASpare()
    {
        $this->game->roll(2);
        $this->game->roll(8);
    }

    /**
     * @test
     */
    public function itAwardsTwoRollBonusForAStrikeInPreviousFrame()
    {

        $this->game->roll(10);
        $this->game->roll(7);
        $this->game->roll(2);
        $this->rollTimes(17, 0);
        $this->assertEquals(28, $this->game->score());


    }
    /**
     * @test
     */
    public function itRunsAPerfectGame()
    {

        $this->rollTimes(12, 10);
        $this->assertEquals(300, $this->game->score());


    }


}
